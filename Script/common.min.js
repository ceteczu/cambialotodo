var EventUtil = {
    addHandler: function (element, type, hander) {
        if (element != null) {
            if (element.addEventListener) {
                element.addEventListener(type, hander, false);
            } else if (element.attachEvent) {
                element.attachEvent("on" + type, function () {
                    hander.apply(element, argument);
                })
            } else {
                element["on" + type] = hander;
            }
        }
    },
    removeHander: function (element, type, hander) {
        if (element != null) {
            if (element.removeEventListener) {
                element.removeEventListener(type, hander, false)
            } else if (element.detachEvent) {
                element.detachEvent("on" + type, hander);
            } else {
                element["on" + type] = null;
            }
        }
    },
    getEvent: function (event) {
        var tmpEvent = event ? event : window.event;
        var result = {
            GlobalEvent: tmpEvent,
            target: (function () {
                return this.target || this.srcElement;
            }).apply(tmpEvent),
            relatedTarget: (function () {
                if (this.relatedTarget) {
                    return this.relatedTarget;
                }
                else if (this.toElement) {
                    return this.toElement;
                }
                else if (this.fromElement) {
                    return this.fromElement;
                }
                else return null
            }).call(tmpEvent)
            ,
            stopPropagation: (function () {
                if (this.stopPropagation) {
                    this.stopPropagation();
                }
                else {
                    this.cancelBubble = true;
                }
            }).apply(tmpEvent)
        }
        return result;
    }
};
function hasClass(obj, className) {
    var arrClassName = obj.className.split(/\s+/i);

    for (var i = 0; i < arrClassName.length; i++) {
        if (arrClassName[i].toLowerCase() == className.toLowerCase()) {
            return true;
        }
    }
    return false;
};
function mouseIn(event) {
    var e = EventUtil.getEvent(event);
    var target = e.target;
    if (hasClass(this, "hover")) {
        return;
    }
    this.className += " hover";
};
function mouseOut(event) {
    if (hasClass(this, "hover")) {
        this.className = this.className.replace(/\s+hover/, "");
    }
    else {
        return;
    }
};
var ll = {
    $: function (id) {
        return document.getElementById(id);
    }
};
var getRec = {
    o: function (el) {
        return {
            l: el.getBoundingClientRect().left,
            r: el.getBoundingClientRect().right,
            t: el.getBoundingClientRect().top,
            b: el.getBoundingClientRect().bottom,
            h: el.getBoundingClientRect().right - el.getBoundingClientRect().left,
            pos: document.documentElement.scrollTop || document.body.scrollTop
        }
    }
};
function getMousePoint(e) {
    var point = {
        x: 0,
        y: 0
    };
    if (typeof window.pageYOffset != 'undefined') {
        point.x = window.pageXOffset;
        point.y = window.pageYOffset;
    }
    else if (typeof document.compatMode != 'undefined' && document.compatMode != 'BackCompat') {
        point.x = document.documentElement.scrollLeft;
        point.y = document.documentElement.scrollTop;
    }
    else if (typeof document.body != 'undefined') {
        point.x = document.body.scrollLeft;
        point.y = document.body.scrollTop;
    }
    point.x += e.clientX;
    point.y += e.clientY;
    return point;
};
function isNull(obj) {
    return typeof (obj) == "undefined" || obj == null;
};
$.format = function (source, params) {
    if (isNull(source)) {
        source = "";
    }
    source = source + "";
    if (arguments.length == 1)
        return function () {
            var args = $.makeArray(arguments);
            args.unshift(source);
            return $.validator.format.apply(this, args);
        };
    if (arguments.length > 2 && params.constructor != Array) {
        params = $.makeArray(arguments).slice(1);
    }
    if (params.constructor != Array) {
        params = [params];
    }
    $.each(params, function (i, n) {
        source = source.replace(new RegExp("\\{" + i + "\\}", "g"), isNull(n) ? '' : n);
    });
    return source;
};
function setSelectedValue(id, value) {
    if (!value) {
        return;
    }
    value = value.toString();
    var count = $("#" + id)[0].length;
    var s = $("#" + id).get(0);
    s.selectedIndex = -1;
    for (var i = 0; i < count; i++) {
        if (s.options[i].value == value) {
            s.selectedIndex = i;
            break;
        }
    }
};
var UTF8Encoder =
{
    getBytes: function (s) {
        var bytes = new Array();
        var c;
        for (var i = 0; i < s.length; i++) {
            c = s.charCodeAt(i);
            if (c < 0x80) {
                bytes.push(c);
            } else if (c < 0x800) {
                bytes.push(0xC0 | c >> 6);
                bytes.push(0x80 | c & 0x3F);
            } else if (c < 0x10000) {
                bytes.push(0xE0 | c >> 12);
                bytes.push(0x80 | c >> 6 & 0x3F);
                bytes.push(0x80 | c & 0x3F);
            } else if (c < 0x200000) {
                bytes.push(0xF0 | c >> 18);
                bytes.push(0x80 | c >> 12 & 0x3F);
                bytes.push(0x80 | c >> 6 & 0x3F);
                bytes.push(0x80 | c & 0x3F);
            } else {
                bytes.push(0x3F);
            }
        }
        return bytes;
    },
    getString: function (bytes) {
        var s = new String;
        var b;
        var b1;
        var b2;
        var b3;
        var b4;
        var bE;
        var ln = bytes.length;
        for (var i = 0; i < ln; i++) {
            b = bytes[i];
            if (!b) {
                continue;
            }
            if (b < 0x80) {
                s += (b > 0) ? String.fromCharCode(b) : "";
            } else if (b < 0xC0) {
            } else if (b < 0xE0) {
                if (ln > i + 1) {
                    b1 = (b & 0x1F); i++;
                    b2 = (bytes[i] & 0x3F);
                    bE = (b1 << 6) | b2;
                    s += String.fromCharCode(bE);
                }
            } else if (b < 0xF0) {
                if (ln > i + 2) {
                    b1 = (b & 0xF); i++;
                    b2 = (bytes[i] & 0x3F); i++;
                    b3 = (bytes[i] & 0x3F);
                    bE = (b1 << 12) | (b2 << 6) | b3;
                    s += String.fromCharCode(bE);
                }
            } else if (b < 0xF8) {
                if (ln > i + 3) {
                    b1 = (b & 0x7); i++;
                    b2 = (bytes[i] & 0x3F); i++;
                    b3 = (bytes[i] & 0x3F); i++;
                    b4 = (bytes[i] & 0x3F);
                    bE = (b1 << 18) | (b2 << 12)(b3 << 6) | b4;
                    s += String.fromCharCode(bE);
                }
            } else {
                s += "?";
            }
        }
        return s;
    }
};
var UrlDecoderHelper = function () {
    var _byteBuffer;
    var _charBuffer = [];
    var _numBytes = 0;
    var str;
    this.addByte = function (b) {
        if (!_byteBuffer) {
            _byteBuffer = [];
        }
        _byteBuffer[_numBytes++] = b;
    };
    this.addChar = function (ch) {
        if (_numBytes > 0) {
            this.flushBytes();
        }
        _charBuffer.push(ch);
    };
    this.flushBytes = function () {
        if (_numBytes > 0) {
            str = UTF8Encoder.getString(_byteBuffer);
            _numBytes = 0;
            _byteBuffer = [];
            for (var i = 0; i < str.length; i++) {
                _charBuffer.push(str.charAt(i));
            }
        }
    };
    this.getString = function () {
        if (_numBytes > 0) {
            this.flushBytes();
        }
        return _charBuffer.join('');
    };
};
var HttpUtility =
{
    hexToInt: function (h) {
        if (!h) {
            return -1;
        }
        h = h.toString().charCodeAt(0);

        if ((h >= '0'.charCodeAt(0)) && (h <= '9'.charCodeAt(0))) {
            return parseInt(h - '0'.charCodeAt(0));
        }
        if ((h >= 'a'.charCodeAt(0)) && (h <= 'f'.charCodeAt(0))) {
            return parseInt((h - 'a'.charCodeAt(0)) + 10);
        }
        if ((h >= 'A'.charCodeAt(0)) && (h <= 'F'.charCodeAt(0))) {
            return parseInt((h - 'A'.charCodeAt(0)) + 10);
        }
        return -1;
    },
    urlEncode: function (string) {
        if (typeof (string) == 'undefined' || string == null) {
            return '';
        }
        string = string.toString();
        if (string.length == 0) {
            return '';
        }
        string = string.replace(/\r\n/g, "\n");
        var utftext = [];
        for (var n = 0; n < string.length; n++) {
            var c = string.charCodeAt(n);
            if (c < 128) {
                utftext.push(String.fromCharCode(c));
            }
            else if ((c > 127) && (c < 2048)) {
                utftext.push(String.fromCharCode((c >> 6) | 192));
                utftext.push(String.fromCharCode((c & 63) | 128));
            }
            else {
                utftext.push(String.fromCharCode((c >> 12) | 224));
                utftext.push(String.fromCharCode(((c >> 6) & 63) | 128));
                utftext.push(String.fromCharCode((c & 63) | 128));
            }
        }
        return utftext.length > 0 ? escape(utftext.join('')) : '';
    },
    urlDecode: function (value) {
        if (!value) {
            return '';
        }
        value = value.toString();
        if (value.length == 0) {
            return '';
        }
        var length = value.length;
        var decoder = new UrlDecoderHelper();
        var ch;
        var num3;
        var num4;
        var num5;
        var num6;
        var num7;
        var num8;
        var b;
        for (var i = 0; i < length; i++) {
            ch = value.charAt(i);
            if (ch == '+') {
                ch = ' ';
            }
            else if ((ch == '%') && (i < (length - 2))) {
                if ((value.charAt(i + 1) == 'u') && (i < (length - 5))) {
                    num3 = this.hexToInt(value.charAt(i + 2));
                    num4 = this.hexToInt(value.charAt(i + 3));
                    num5 = this.hexToInt(value.charAt(i + 4));
                    num6 = this.hexToInt(value.charAt(i + 5));
                    if (((num3 < 0) || (num4 < 0)) || ((num5 < 0) || (num6 < 0))) {
                        if ((ch.charCodeAt(0) & 0xff80) == 0) {
                            decoder.addByte(ch.charCodeAt(0) & 255);
                        }
                        else {
                            decoder.addChar(ch);
                        }
                    }
                    ch = ((((num3 << 12) | (num4 << 8)) | (num5 << 4)) | num6) + '';
                    i += 5;
                    decoder.addChar(ch);
                    continue;
                }
                num7 = this.hexToInt(value.charAt(i + 1));
                num8 = this.hexToInt(value.charAt(i + 2));
                if ((num7 >= 0) && (num8 >= 0)) {
                    b = ((num7 << 4) | num8) & 255;
                    i += 2;
                    decoder.addByte(b);
                    continue;
                }
            }
            if ((ch.charCodeAt(0) & 0xff80) == 0) {
                decoder.addByte(ch.charCodeAt(0) & 255);
            }
            else {
                decoder.addChar(ch);
            }
        }
        return decoder.getString();
    }
};
function SetDropListEvent(lstids, selid) {
    var cb = null;
    if (arguments.length > 2 && arguments[2]) {
        cb = arguments[2];
    }
    $(lstids).bind("click", { 'callback': cb, "selid": selid }, DropListClick);
};
function DropListClick(event) {
    var page = $(this).attr("data-text");
    $(event.data["selid"]).html(page);
    if (event.data['callback']) {
        event.data['callback']($(this).attr("data-value"));
    }
};
function sp_selsect_click(event) {
    var e = EventUtil.getEvent(event);
    var target = e.target;

    if (target.nodeName == "A") {
        this.className = this.className.replace(/\s+hover/, "");
        //this.children[0].children[1].innerText = parseInt(target.innerText);
        this.children[0].children[1].innerText = target.innerText;
    }
    else {
        return;
    }
};
function cick_txt(event) {
    var e = EventUtil.getEvent(event);
    var target = e.target;
    if (target.nodeName == "A") {
        this.className = this.className.replace(/\s+hover/, "");
        this.children[0].children[1].innerText = parseInt(target.innerText);
    }
    else {
        return;
    }
};
function getLoginInfo(loginurl, logouturl) {
    var op = {
        url: loginurl,
        type: 'GET',
        dataType: 'html',
        success: function (data) {
            try {
                var udata = eval('(' + data + ')');
                var loginstr = '';

                if (udata.UserName != '') {
                    loginstr = '<span style="float:left;"><div id="google_translate_element"></div></span><span class="mr20">' + udata.UserName + ', welcome to lightake!</span><i class="u1 u111"></i><a href="' + logouturl + '" class="co008 top_a">Logout</a>';
                    $("#loginfobox").html(loginstr);
                }
            } catch (e) {

            }
        }
    };
    $.ajax(op);
};
function GetShoppingCartStatsInfo() {
    var url = SiteConfigParam.ShoppingCartDomain + "/Shopping/GetCartCount?callback=?";
    $.ajax({
        type: "get",
        url: url,
        dataType: "jsonp",
        jsonp: "callback",
        async: false,
        success: function (json) {
            $("#cartstatsb").html(json[0].num);
        },
        error: function () {
        }
    });
};
function scrollToTop() {
    $("body,html").animate({ scrollTop: 0 }, 600);
};
function bindSearchEvent(url) {
    $("#btnsearch").bind("click", function () {
        var kw = $.trim($("#txtkeyword").val());
        if (kw.length == 0) {
            return;
        }
        window.location = $.format(url, HttpUtility.urlEncode(kw));
    });
};
function bindDocKeyup() {
    $(document).bind("keyup", function (event) {
        var evt = $.event.fix(event);
        if (evt.keyCode == 13 && $(evt.target).attr("id") == "txtkeyword") {
            $("#btnsearch").click();
        }
    });
};
function setMenuEvent() {
    var catmbox = $("#catelstmenu");
    var catelst = $("#catemenubox");
    catmbox.bind("mouseenter", function () {
        catelst.show();
    });
    if (catelst.attr("data-fix") != "true") {
        catmbox.bind("mouseleave", function () {
            catelst.hide();
        });
    }
};
function SetFixedCategoryMenu() {
    $("#catemenubox").attr("data-fix", "true").show();
};
function subscribeEmail(id) {
    var txt = id == "btnemailsub" ? $("#txtemailsub") : $("#txtNewEmail");
    var email = $.trim(txt.val());
    if (email.length == 0) {
        txt.focus();
        return;
    }
    if (!/^[\w-]+(\.[\w-]+)*@[\w-]+(\.(\w)+)*(\.(\w){2,3})$/.test(email)) {
        alert("Invalid email.");
        txt.focus();
        return;
    }
    window.location = "/NewsLetters?email=" + email;
};
var fnTimeCountDown = function (d, o) {
    var f = {
        zero: function (n) {
            var n = parseInt(n, 10);
            if (n > 0) {
                if (n <= 9) {
                    n = "0" + n;
                }
                return String(n);
            } else {
                return "00";
            }
        },
        dv: function () {
            d = d || new Date(2050, 0, 1);
            var future = d, now = new Date();
            var leftsecond = parseInt((future.getTime() - now.getTime()) / 1000);
            __d = parseInt(leftsecond / 3600 / 24);
            __h = parseInt((leftsecond / 3600) % 24);
            __m = parseInt((leftsecond / 60) % 60);
            __s = parseInt(leftsecond % 60);
            var pms = {
                sec: "00",
                mini: "00",
                hour: "00",
                day: "00"
            };
            if (leftsecond > 0) {
                pms.sec = __s;
                pms.mini = __m;
                pms.hour = __h;
                pms.day = __d;
            }
            return pms;
        },
        ui: function () {
            if (o.sec) {
                o.sec.innerHTML = f.dv().sec;
            }
            if (o.mini) {
                o.mini.innerHTML = f.dv().mini;
            }
            if (o.hour) {
                o.hour.innerHTML = f.dv().hour;
            }
            if (o.day) {
                o.day.innerHTML = f.dv().day + " day";
            }
            setTimeout(f.ui, 1000);
        }
    };
    f.ui();
};
var cookieUtil = {
    get: function (name) {
        var cookieName = encodeURIComponent(name) + "=",
        cookieStart = document.cookie.indexOf(cookieName),
        cookieValue = null;
        if (cookieStart > -1) {
            var cookieEnd = document.cookie.indexOf("; ", cookieStart);
            if (cookieEnd == -1) {
                cookieEnd = document.cookie.length;
            }
            var cookieValue = decodeURIComponent(document.cookie.substring(cookieStart + cookieName.length, cookieEnd));
        }
        else {
            return;
        }
        return cookieValue;
    },
    set: function (name, value, expries, path, domain, sesure) {
        var cookieText = encodeURIComponent(name) + "=" + encodeURIComponent(value);
        if (expries instanceof Date) {
            cookieText += "; expries=" + expries;
        }
        if (path) {
            cookieText += "; path=" + path;
        }
        if (domain) {
            cookieText += "; domain" + domain;
        }
        if (sesure) {
            cookieText += "; sesure";
        }
        document.cookie = cookieText;
    },
    unCookie: function (name, path, domain, sesure) {
        this.set(name, "", new Date(0), path, domain, secure);
    }
};
var oAdiv;
function zoom(ev) {
    var eEv = ev ? ev : window.event;
    if (oAdiv == undefined) return;
    oAdiv.style.left = document.documentElement.scrollLeft + eEv.clientX - (oAdiv.offsetWidth / 2) + 'px';
    if (pageLeft(oAdiv) - GetCss(oAdiv, 'borderLeftWidth') < pageLeft(oVdiv) + GetCss(oVdiv, 'borderLeftWidth')) {
        oAdiv.style.left = pageLeft(oVdiv) + GetCss(oVdiv, 'borderLeftWidth') - GetCss(oAdiv, 'borderLeftWidth') + 'px';
    }
    if (pageLeft(oAdiv) + oAdiv.offsetWidth - GetCss(oAdiv, 'borderRightWidth') > pageLeft(oVdiv) + oVdiv.offsetWidth - GetCss(oVdiv, 'borderRightWidth')) {
        oAdiv.style.left = (pageLeft(oVdiv) + oVdiv.offsetWidth) - GetCss(oVdiv, 'borderRightWidth') - oAdiv.offsetWidth + GetCss(oAdiv, 'borderRightWidth') + 'px';
    }

    if (userBrowser() == "Chrome") {
        oAdiv.style.top = document.body.scrollTop + eEv.clientY - (oAdiv.offsetHeight / 2) + 'px';
    } else {
        oAdiv.style.top = document.documentElement.scrollTop + eEv.clientY - (oAdiv.offsetHeight / 2) + 'px';
    }
    if (pageTop(oAdiv) - GetCss(oAdiv, 'borderTopWidth') < pageTop(oVdiv) + GetCss(oVdiv, 'borderTopWidth')) {
        oAdiv.style.top = pageTop(oVdiv) + GetCss(oVdiv, 'borderTopWidth') - GetCss(oAdiv, 'borderTopWidth') + 'px';
    }
    if (pageTop(oAdiv) + oAdiv.offsetHeight - GetCss(oAdiv, 'borderBottomWidth') > pageTop(oVdiv) + oVdiv.offsetHeight - GetCss(oVdiv, 'borderBottomWidth')) {
        oAdiv.style.top = (pageTop(oVdiv) + oVdiv.offsetHeight) - GetCss(oVdiv, 'borderBottomWidth') - oAdiv.offsetHeight + GetCss(oAdiv, 'borderBottomWidth') + 'px';
    }

    var nBcL = (pageLeft(oAdiv) + GetCss(oAdiv, 'borderLeftWidth') - pageLeft(oVdiv) - GetCss(oVdiv, 'borderLeftWidth')) / (oVdiv.offsetWidth - GetCss(oVdiv, 'borderLeftWidth') - GetCss(oVdiv, 'borderRightWidth'));
    var nBcT = (pageTop(oAdiv) - pageTop(oVdiv)) / (oVdiv.offsetHeight - GetCss(oVdiv, 'borderTopWidth') - GetCss(oVdiv, 'borderBottomWidth'));
    oZdiv.scrollLeft = oBimg.offsetWidth * nBcL;
    oZdiv.scrollTop = oBimg.offsetHeight * nBcT;
};
function init(nZoom) {
    oAdiv.style.width = (oVdiv.offsetWidth - GetCss(oVdiv, 'borderLeftWidth') - GetCss(oVdiv, 'borderRightWidth')) / nZoom + 'px';
    oAdiv.style.height = (oVdiv.offsetHeight - GetCss(oVdiv, 'borderTopWidth') - GetCss(oVdiv, 'borderBottomWidth')) / nZoom + 'px';
    oAdiv.style.display = 'block';
    oZdiv.style.position = 'absolute';
    oZdiv.style.overflow = 'hidden';
    oZdiv.style.border = '#cccccc solid 1px';
    oZdiv.style.left = pageLeft(oVdiv) + oVdiv.offsetWidth + 10 + 'px';
    oZdiv.style.top = pageTop(oVdiv) + 'px';
    oZdiv.style.width = (oAdiv.offsetWidth - 2) * nZoom + 'px';
    oZdiv.style.height = (oAdiv.offsetHeight - 2) * nZoom + 'px';
    oZdiv.style.zIndex = '1001';
    oZdiv.style.display = 'block';
    if (document.all) {
        zoom();
    }
};
function hide() {
    oAdiv.style.display = 'none';
    oZdiv.style.display = 'none';
};
function pageLeft(oObj) {
    var nPosition = oObj.offsetLeft;
    if (oObj.offsetParent != null) {
        nPosition += pageLeft(oObj.offsetParent);
    }
    return nPosition;
};
function pageTop(oObj) {
    var nPosition = oObj.offsetTop;
    if (oObj.offsetParent != null) {
        nPosition += pageTop(oObj.offsetParent);
    }
    return nPosition;
};
function GetCss(oObj, cAttrib) {
    var AttValue = oObj.currentStyle ? parseInt(oObj.currentStyle[cAttrib], 10) : parseInt(document.defaultView.getComputedStyle(oObj, null)[cAttrib], 10);
    return isNaN(AttValue) ? 0 : AttValue;
};
function GetElement(obj) {
    oVdiv = document.getElementById('viewDiv');
    oZdiv = document.getElementById('zoomDiv');
    oAdiv = document.getElementById('areaDiv');
    oBimg = document.getElementById('bigImg');
    oSimg = document.getElementById('smallImg');
    oAdiv.style.cssText = 'display:none;position:absolute;z-index:1000;filter:alpha(opacity=40);opacity:0.4;background-color:#FFF;border:#898989 solid 1px;';
};
function userBrowser() {
    var browserName = navigator.userAgent.toLowerCase();
    if (/msie/i.test(browserName) && !/opera/.test(browserName)) {
        return "IE";
    } else if (/firefox/i.test(browserName)) {
        return "Firefox";
    } else if (/chrome/i.test(browserName) && /webkit/i.test(browserName) && /mozilla/i.test(browserName)) {
        return "Chrome";
    } else if (/opera/i.test(browserName)) {
        return "Opera";
    } else if (/webkit/i.test(browserName) && !(/chrome/i.test(browserName) && /webkit/i.test(browserName) && /mozilla/i.test(browserName))) {
        return "Safari";
    } else {
        return "unKnow";
    }
};
function SearchFocus(str, obj) {
    obj.className = "sch_insert_focus";
    var keyWords = obj.value;
    if (str != "" && keyWords == str) {
        obj.value = "";
    }
};
function SearchBlur(str, obj) {
    var keyWords = obj.value;
    if (str == "" || keyWords == str) {
        obj.className = "sch_insert";
    }
};